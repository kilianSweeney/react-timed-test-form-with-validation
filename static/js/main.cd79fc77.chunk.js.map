{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ProjectList","props","projectlist","map","item","i","key","id","name","description","onClick","onRemove","ProjectForm","state","newProject","cantSubmit","alphaKeyPress","bind","updateProjectId","updateProjectName","updateProjectDescription","validateForm","submitForm","e","test","preventDefault","this","setState","target","value","length","onSave","onSubmit","htmlFor","onChange","type","ref","onKeyPress","disabled","React","Component","App","updateList","newList","projectList","push","removeItem","itemToRemove","filter","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd79fc77.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction ProjectList(props) {\n    return <ul>\n      {props.projectlist.map((item,i) => {\n        return <li key={i}>{item.id} {item.name} {item.description} <button onClick={() => props.onRemove(item)}>remove</button></li>\n      })}\n    </ul>\n}\n\nclass ProjectForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newProject: {\n        id:'',\n        name:'',\n        description:''\n      },\n      cantSubmit: true\n    }\n    \n    this.alphaKeyPress = this.alphaKeyPress.bind(this);\n    this.updateProjectId = this.updateProjectId.bind(this);\n    this.updateProjectName = this.updateProjectName.bind(this);\n    this.updateProjectDescription= this.updateProjectDescription.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n  }\n\n  alphaKeyPress(e) {\n    const re = /[0-9A-F:]+/g;\n    if (!re.test(e.key)) {\n      e.preventDefault();\n    }\n  }\n\n  updateProjectId(e) {\n    this.setState({newProject:{...this.state.newProject,id:e.target.value}});\n    this.validateForm();\n  }\n\n  updateProjectName(e) {\n    this.setState({newProject:{...this.state.newProject,name:e.target.value}});\n    this.validateForm();\n  }\n\n  updateProjectDescription(e) {\n    this.setState({newProject:{...this.state.newProject,description:e.target.value}});\n    this.validateForm();\n  }\n\n  validateForm(){\n    this.setState({cantSubmit: !(this.state.newProject.id.length > 0 && \n      this.state.newProject.name.length > 0 &&\n      this.state.newProject.description.length > 0)})\n  }\n\n  submitForm(e){\n    e.preventDefault();\n    if(!this.state.cantSubmit){\n      this.props.onSave(this.state.newProject);\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.submitForm}>\n        <div>\n          <label htmlFor=\"id\">Id:</label>\n          <input name=\"id\" onChange={this.updateProjectId} type=\"text\" ref=\"id\" onKeyPress={this.alphaKeyPress} />\n        </div>\n        <div>\n          <label htmlFor=\"name\">Name:</label>\n          <input onChange={this.updateProjectName} name=\"name\" type=\"text\" />\n        </div>\n        <div>\n          <label htmlFor=\"Description:\">Description:</label>\n          <textarea onChange={this.updateProjectDescription} name=\"description\"></textarea>\n        </div>\n      <button type=\"submit\" disabled={this.state.cantSubmit} >submit</button>\n      </form>\n    );\n    }\n  }\n\n  class App extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        projectList: [\n          {id: '111',\n          name: 'Project One',\n          description: 'Our First List'\n        },\n        {id: '112',\n          name: 'Project Two',\n          description: 'Our Second List'\n        }\n      ] \n      }\n    }\n\n    updateList = (newProject) => {\n      let newList = this.state.projectList;\n      newList.push(newProject);\n      this.setState({projectList:newList});\n    }\n\n    removeItem = (itemToRemove) => {\n      let newList = this.state.projectList;\n      newList = newList.filter(item => item.id !== itemToRemove.id);\n      this.setState({projectList: newList});\n    }\n\n  render() {\n    return (\n    <div className=\"App\">\n      <ProjectForm onSave={this.updateList}></ProjectForm>\n        <ProjectList onRemove={this.removeItem} projectlist={this.state.projectList}></ProjectList>\n    </div>\n  );}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}